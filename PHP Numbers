PHP Numbers

=> One thing to notice about PHP is that provides automatic data type conversion.
So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a 
string to the same variable, the type will change to a string.

=> This automatic conversion can sometimes break your code.

PHP Integers

2, 256, -256, 10358, -179567 are integers.

An integer is a number without any decimal part.

An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 
9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an 
integer.

Note:- Another important thing to know is that even if 2.5*4 = 10, the result is stored as float, because one of the operands is a float(2.5)

Rules that tells the number is an integer

1) An integer must have at least one digit.
2) An integer must not have any decimal point.
3) An integer can be either positive or negative.
4) Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal 
(8-based - prefixed with 0)

PHP has the following predefined constants for integers:-

=> PHP_INT_MAX -> The largest integer supported.
=> PHP_INT_MIN -> The smallest integer supported.
=> PHP_INT_SIZE -> The size of an integer in bytes.

PHP as the following functions to check if a number integer or not

=> is_int()
=> is_integer() alias of is_int()
=> is_long() alias of is_int()

Example: -

<?php
$x = 5985;
var_dump(is_int($x));

$x = 59.85;
var_dump(is_int($x));
?>

Output:-

bool(true)
bool(false)


PHP FLOATS

A float a number with decimal point or a number in exponential form.

2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 are all floats.

The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.

PHP has the following predefined constants for floats (from PHP 7.2):

=> PHP_FLOAT_MAX -> The largest representable floating point number.
=> PHP_FLOAT_MIN -> The smallest representable floating point number.
=> PHP_FLOAT_DIG -> The number of decimal digits that can be rounded into a float and back without precision loss.
=> PHP_FLOAT_EPSILON -> The smallest representable positive number x, so that x + 1.0 != 1.0.

PHP has the following functions to check whether is float or not

=> is_float()
=> is_double() -> alias of is_float()

Example:-

<?php
$x = 10.365;
var_dump(is_float($x));
?>

output:- bool(true)

PHP Infinity 

A numeric value that is larger than PHP_FLOAT_MAX is considered as infinity.

PHP has the following functions to check whether the number is infinity or not

is_finite()
is_infinite()

Example:-

<?php
$x = 1.9e411;
var_dump($x);
?>

output:-

float(INF)

PHP NaN

NaN stands for Not a Number
NaN is used for impossible mathematical operations.

PHP has the following function to check if a value is not a number.

=> is_nan()

Example:-

<?php
$x = acos(8);
var_dump($x);
?>


Output:-

float(NaN)

PHP Numerical Strings

The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number 
or a numeric string, false otherwise.

Example: -

<?php
$x = 5985;
var_dump(is_numeric($x));

$x = "5985";
var_dump(is_numeric($x));

$x = "59.85" + 100;
var_dump(is_numeric($x));

$x = "Hello";
var_dump(is_numeric($x));
?>

Output:-
bool(true)
bool(true)
bool(true)
bool(false)

PHP Casting Strings and Floats to Integers.

Here we convert one datatype into another data type.

The (int), (integer), or intval() function are often used to convert a value to an integer.

Example:-

<?php
// Cast float to int
$x = 23465.768;
$int_cast = (int)$x;
echo $int_cast;

echo "<br>";

// Cast string to int
$x = "23465.768";
$int_cast = (int)$x;
echo $int_cast;
?>

Output:- 

23465
23465


PHP Math

1) pi() => Function returns the value  of pi

Example:-

<?php
echo(pi()); // returns 3.1415926535898
?>

2) min() and max() => Functions returns lowest and highest values in a list of arguments

Example:-

<?php
echo(min(0, 150, 30, 20, -8, -200));  // returns -200
echo(max(0, 150, 30, 20, -8, -200));  // returns 150
?>

3) abs() => Function returns the absolute (positive) value of a number.

Example:-

<?php
echo(abs(-6.7));  // returns 6.7
?>

4) sqrt() => Function returns the square root of a number

Example:-

<?php
echo(sqrt(64));  // returns 8
?>

5) round() => Function rounds the floating-point-number to the nearest value integer.

Example:-
<?php
echo(round(0.60));  // returns 1
echo(r

6) rand() => Function returns the random number

Example:-

=> <?php
echo(rand());
?>

=> <?php
echo(rand(10, 100));
?>

7) acos() => Returns the arc cosine of a number
8) acosh() => Returns the inverse hyperbolic cosine of a number
9) asin() => Returns the arc sine of a number
10) asinh() => Returns the inverse hyperbolic sine of a number
11) atan() => Returns the arc tangent of a number in radians
12) atan2() => 	Returns the arc tangent of two variables x and y
13) atanh() => Returns the inverse hyperbolic tangent of a number
14) base_convert() => Converts a number from one number base to another
15) bindec() => Converts a binary number to a decimal number
16) ceil() => Rounds a number up to the nearest integer
17) cos() => Returns the cosine of a number
18) cosh() => Returns the hyperbolic cosine of a number
19) decbin() =>Converts a decimal number to a binary number
20) dechex() => Converts a decimal number to a hexadecimal number
21) decoct() => Converts a decimal number to a octadecimal number
22) deg2rad() => Converts a degree value to a radian value
23) exp() => Calculates the exponent of e
24) expm1() => Returns exp(x) - 1
25) floor() => Rounds a number down to the nearest integer
26) fmod() => Returns the remainder of x/y.
27) getrandmax() => Returns the largest possible value returned by rand()
28) hexdec() => Converts a hexadecimal number to a decimal number
29) hypot() => Calculates the hypotenuse of a right-angle triangle
30) intdiv() => 	Performs integer division
31) lcg_value() => 	Returns a pseudo random number in a range between 0 and 1
32) log() => Returns the natural logarithm of a number.
33) log10() => 	Returns the base-10 logarithm of a number
34) log1p() => 	Returns log(1+number)
35) mt_getrandmax() => Returns the largest possible value returned by mt_rand()
36) mt_rand() => 	Generates a random integer using Mersenne Twister algorithm
37) mt_srand() => Seeds the Mersenne Twister random number generator
38) octdec() => 	Converts an octal number to a decimal number
39) pow() => 	Returns x raised to the power of y
40) rad2deg() => Converts a radian value to a degree value
41) sin() => 	Returns the sine of a number
42) sinh() => Returns the hyperbolic sine of a number
43) srand() => 	Seeds the random number generator
44) tan() => Returns the tangent of a number
45) tanh() => Returns the hyperbolic tangent of a number

PHP pre defined Math Constants

   Constant                             Value                                        Definition
=> INF                                  INF                                          The infinite
=> M_E                                  2.7182818284590452354                        Returns e
=> M_EULER                              0.57721566490153286061                       Returns Euler constant
=> M_LNPI                               1.14472988584940017414                       Returns the natural logarithm of PI: log_e(pi)
=> M_LN2                                0.69314718055994530942                       Returns the natural logarithm of 2: log_e 2
=> M_LN10                               2.30258509299404568402                       Returns the natural logarithm of 10: log_e 10
=> M_LOG2E                              1.4426950408889634074                        Returns the base-2 logarithm of E: log_2 e
=> M_LOG10E                             0.43429448190325182765                       Returns the base-10 logarithm of E: log_10 e
=> M_PI                                 3.14159265358979323846                       Returns Pi
=> M_PI_2                               1.57079632679489661923                       Returns Pi/2
=> M_PI_4                               0.78539816339744830962                       Returns Pi/4
=> M_1_PI                               0.31830988618379067154                       Returns 1/Pi
=> M_2_PI                               0.63661977236758134308                       Returns 2/Pi
=> M_SQRTPI                             1.77245385090551602729                       Returns the square root of PI: sqrt(pi)
=> M_2_SQRTPI                           1.12837916709551257390                       Returns 2/square root of PI: 2/sqrt(pi)
=> M_SQRT1_2                            0.70710678118654752440                       Returns the square root of 1/2: 1/sqrt(2)
=> M_SQRT2                              1.41421356237309504880                       Returns the square root of 2: sqrt(2)
=> M_SQRT3                              1.73205080756887729352                       Returns the square root of 3: sqrt(3)
=> NAN                                  NAN                                          Not a Number
=> PHP_ROUND_HALF_UP                    1                                            Round halves up
=> PHP_ROUND_HALF_DOWN                  2                                            Round halves down
=> PHP_ROUND_HALF_EVEN                  3                                            Round halves to even numbers
=> PHP_ROUND_HALF_ODD                   4                                            Round halves to odd numbers













