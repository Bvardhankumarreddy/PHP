PHP Numbers

=> One thing to notice about PHP is that provides automatic data type conversion.
So, if you assign an integer value to a variable, the type of that variable will automatically be an integer. Then, if you assign a 
string to the same variable, the type will change to a string.

=> This automatic conversion can sometimes break your code.

PHP Integers

2, 256, -256, 10358, -179567 are integers.

An integer is a number without any decimal part.

An integer data type is a non-decimal number between -2147483648 and 2147483647 in 32 bit systems, and between -9223372036854775808 and 
9223372036854775807 in 64 bit systems. A value greater (or lower) than this, will be stored as float, because it exceeds the limit of an 
integer.

Note:- Another important thing to know is that even if 2.5*4 = 10, the result is stored as float, because one of the operands is a float(2.5)

Rules that tells the number is an integer

1) An integer must have at least one digit.
2) An integer must not have any decimal point.
3) An integer can be either positive or negative.
4) Integers can be specified in three formats: decimal (10-based), hexadecimal (16-based - prefixed with 0x) or octal 
(8-based - prefixed with 0)

PHP has the following predefined constants for integers:-

=> PHP_INT_MAX -> The largest integer supported.
=> PHP_INT_MIN -> The smallest integer supported.
=> PHP_INT_SIZE -> The size of an integer in bytes.

PHP as the following functions to check if a number integer or not

=> is_int()
=> is_integer() alias of is_int()
=> is_long() alias of is_int()

Example: -

<?php
$x = 5985;
var_dump(is_int($x));

$x = 59.85;
var_dump(is_int($x));
?>

Output:-

bool(true)
bool(false)


PHP FLOATS

A float a number with decimal point or a number in exponential form.

2.0, 256.4, 10.358, 7.64E+5, 5.56E-5 are all floats.

The float data type can commonly store a value up to 1.7976931348623E+308 (platform dependent), and have a maximum precision of 14 digits.

PHP has the following predefined constants for floats (from PHP 7.2):

=> PHP_FLOAT_MAX -> The largest representable floating point number.
=> PHP_FLOAT_MIN -> The smallest representable floating point number.
=> PHP_FLOAT_DIG -> The number of decimal digits that can be rounded into a float and back without precision loss.
=> PHP_FLOAT_EPSILON -> The smallest representable positive number x, so that x + 1.0 != 1.0.

PHP has the following functions to check whether is float or not

=> is_float()
=> is_double() -> alias of is_float()

Example:-

<?php
$x = 10.365;
var_dump(is_float($x));
?>

output:- bool(true)

PHP Infinity 

A numeric value that is larger than PHP_FLOAT_MAX is considered as infinity.

PHP has the following functions to check whether the number is infinity or not

is_finite()
is_infinite()

Example:-

<?php
$x = 1.9e411;
var_dump($x);
?>

output:-

float(INF)

PHP NaN

NaN stands for Not a Number
NaN is used for impossible mathematical operations.

PHP has the following function to check if a value is not a number.

=> is_nan()

Example:-

<?php
$x = acos(8);
var_dump($x);
?>


Output:-

float(NaN)

PHP Numerical Strings

The PHP is_numeric() function can be used to find whether a variable is numeric. The function returns true if the variable is a number 
or a numeric string, false otherwise.

Example: -

<?php
$x = 5985;
var_dump(is_numeric($x));

$x = "5985";
var_dump(is_numeric($x));

$x = "59.85" + 100;
var_dump(is_numeric($x));

$x = "Hello";
var_dump(is_numeric($x));
?>

Output:-
bool(true)
bool(true)
bool(true)
bool(false)

PHP Casting Strings and Floats to Integers.

Here we convert one datatype into another data type.

The (int), (integer), or intval() function are often used to convert a value to an integer.

Example:-

<?php
// Cast float to int
$x = 23465.768;
$int_cast = (int)$x;
echo $int_cast;

echo "<br>";

// Cast string to int
$x = "23465.768";
$int_cast = (int)$x;
echo $int_cast;
?>

Output:- 

23465
23465








