PHP Form Handling

The PHP superglobals $_GET and $_POST are used collect form-data

Example: - Simple HTML form using POST method.

<html>
<body>

<form action="welcome.php" method="post">
Name: <input type="text" name="name"><br>
E-mail: <input type="text" name="email"><br>
<input type="submit">
</form>

</body>
</html>

Exaplanation: -

When user fills the name and email data and clicks the submit button, the form data is sent to the "welcome.php". The form data is sent
with HTTP POST method.

Example: - Simple HTML form using GET method.

<html>
<body>

<form action="welcome_get.php" method="get">
Name: <input type="text" name="name"><br>
E-mail: <input type="text" name="email"><br>
<input type="submit">
</form>

</body>
</html>

Explanation: - The same result is achieved after using this form.

GET vs POST

Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). This array holds key/value pairs,
where keys are the names of the form controls and values are the input data from user.

Both GET and POST are treated as $_GET and $_POST. These superglobals, which means that they are always accessible, regardless of scope -
and you can access then from any function, class or file without having do to anything special.

$_GET is an array of variables passed to the current script via URL parameters.

$_POST is an array of variables passed to the current script via the HTTP POST method.

When to use GET?

Information sent from a form with the GET method is visible to everyone ( all variable and names are displayed in the URL). GET also has
limits on the amount of information to send. The limitation is about 2000 characters. However, because the variables are displayed in the 
URL, it is possible for a bookmark page. 

GET may used to send non-sensitive data.

Note: -  GET should NEVER be used for sending passwords or other sensitive information!


When to use POST?

Information sent from a form with POST method is invisible to others ( all names/values are embedded within the body of the HTTP request)
and has no limits on the amount of information to send.

Moreover POST supports advanced functionality such as support for multi-part binary input while uploading files to server.

However, because the variables are not displayed in the URL, it is not possible to bookmark the page.

PHP Form Validation 

Field            	Validation Rules
Name	            Required. + Must only contain letters and whitespace
E-mail          	Required. + Must contain a valid email address (with @ and .)
Website         	Optional. If present, it must contain a valid URL
Comment         	Optional. Multi-line input field (textarea)
Gender           	Required. Must select one

Text Fields

The name, email, and website fields are text input elements, and the comment field is a textarea. The HTML code looks like this:

Name: <input type="text" name="name">
E-mail: <input type="text" name="email">
Website: <input type="text" name="website">
Comment: <textarea name="comment" rows="5" cols="40"></textarea>

Radio Buttons

The gender fields are radio buttons and the HTML code looks like this:

Gender:
<input type="radio" name="gender" value="female">Female
<input type="radio" name="gender" value="male">Male
<input type="radio" name="gender" value="other">Other


The Form Element

The HTML code of the form looks like this:

<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

When the form is submitted, the form data is sent with method="post".

What is the $_SERVER["PHP_SELF"] variable?

The $_SERVER["PHP_SELF"] is a super global variable that returns the filename of the currently executing script.

So, the $_SERVER["PHP_SELF"] sends the submitted form data to the page itself, instead of jumping to a different page. 
This way, the user will get error messages on the same page as the form.

What is the htmlspecialchars() function?

The htmlspecialchars() function converts special characters to HTML entities. This means that it will replace HTML characters like 
< and > with &lt; and &gt;. This prevents attackers from exploiting the code by injecting HTML or Javascript code (Cross-site Scripting 
attacks) in forms.

Big Note On PHP Form Security

The $_SERVER["PHP_SELF"] variable can be used by hackers!

If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) commands to execute.

** Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers
**to inject client-side script into web pages viewed by other users.

Assume we have the following form in a page named "test_form.php":

<form method="post" action="<?php echo $_SERVER["PHP_SELF"];?>">

Now, if a user enters the normal URL in the address bar like "http://www.example.com/test_form.php", the above code will be translated to:

<form method="POST" action="test_form.php">

However, consider that a user enters the following URL in the address bar:

http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E

In this case, the above will be translated to:

<form method="POST" action="test_form.php/"><script>alert('hacked')</script>

This code adds a script tag and an alert command. And when the page loads, the javascript code will be executed (the user will se an 
alert box). This is just a simple and harmless example how the PHP_SELF variable can be exploited.

Be aware of that any Javascript code can be added inside the <script> tag.! A hacker can redirect the user to a file on another server,
and that file can hold malicious code that can alter global variables or submit the form to another address to save the user data, for 
example.

How to avoid $_SERVER["PHP_SELF"] exploits?

$_SERVER["PHP_SELF"] exploits can be avoided by using the htmlspecialchars() function.

The form code could look like this:

<form method="POST" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">

The htmlspecialchars() function converts special characters to HTML entities. Now if the user tries to exploit the PHP_SELF variable, 
it will result in the following output:

<form method="post" action="test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;">












