PHP Built-in Functions

PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.


PHP User Defined Functions

1. A fucntion is a block of statements, that can be used repeatedly in a program.
2. A function will not execute automatically when a page loads.
3. A function will be executed by a call to the function.

To create user defined function in PHP, we need to follow the synatx. The function starts with the "function" keyword.

Syntax: -

function functionName() {
  code to be executed;
}

Note: - A function name start with a letter or a underscore. Function names are not case-sensitive.

Example:-

<?php
function writeMsg() {
  echo "Hello world!";
}

writeMsg(); // call the function
?>

PHP Function Arguments

Information can be passed to functions through arguments. An argument is just like a variable.

Arguments are specified after function name, inside the parentheses. We can add as many arguments as we want, they are just separated by
comma.

Example: - 1

<?php
function familyName($fname) {
  echo "$fname Refsnes.<br>";
}

familyName("Jani");
familyName("Hege");
familyName("Stale");
familyName("Kai Jim");
familyName("Borge");
?>

Example: - 2

<?php
function familyName($fname, $year) {
  echo "$fname Refsnes. Born in $year <br>";
}

familyName("Hege", "1975");
familyName("Stale", "1978");
familyName("Kai Jim", "1983");
?>

PHP is a Loosely Typed Language

PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense,
you can do things like adding a string to an integer without causing an error.

In PHP 7. type declarations are added. This gives an option to specify the expected data type when declaring a function, and by adding
"strict" declaration, it will throw a "Fatal Error" if data types mismatches.

Example: - 1

<?php
function addNumbers(int $a, int $b) {
  return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is NOT enabled "5 days" is changed to int(5), and it will return 10
?>

Example: - 2

<?php declare(strict_types=1); // strict requirement

function addNumbers(int $a, int $b) {
  return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is enabled and "5 days" is not an integer, an error will be thrown
?>

PHP Default Argument Value

The following shows how to use default parameter.

Example: -

<?php declare(strict_types=1); // strict requirement
function setHeight(int $minheight = 50) {
  echo "The height is : $minheight <br>";
}

setHeight(350);
setHeight(); // will use the default value of 50
setHeight(135);
setHeight(80);
?>

PHP Functions - Returning Values

To let a function return a value, use the "return" statement

Example: -

<?php declare(strict_types=1); // strict requirement
function sum(int $x, int $y) {
  $z = $x + $y;
  return $z;
}

echo "5 + 10 = " . sum(5, 10) . "<br>";
echo "7 + 13 = " . sum(7, 13) . "<br>";
echo "2 + 4 = " . sum(2, 4);
?>

PHP Return Type Declarations

PHP 7 also supports Type declarations for the "return" statement. With the type declarations for the function arguments, by enabling the
strict requirement. It will throw a "Fatal Error" on a type mismatch.

To declare a type for the function return, add a colon (:) and the type right before the opening curly ({ ) when declaring the function.

Example: - 1

<?php declare(strict_types=1); // strict requirement
function addNumbers(float $a, float $b) : float {
  return $a + $b;
}
echo addNumbers(1.2, 5.2);
?>

You can specify different return type, than argument types, we should check that return is of correct type:

Example: -2

<?php declare(strict_types=1); // strict requirement
function addNumbers(float $a, float $b) : int {
  return (int)($a + $b);
}
echo addNumbers(1.2, 5.2);
?>

Passing Arguments by Reference

Arguments are usually passed by value, which means that a copy of the value is used in the function and the varaiable that was passed
into the function cannot be changed.

When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function
argument into a reference, the "&" operator is used

Example: -

<?php
function add_five(&$value) {
  $value += 5;
}

$num = 2;
add_five($num);
echo $num;
?>



Arrays


An array stores mnultiple values in one single varialble

Example: -

<?php
$cars = array("Volvo", "BMW", "Toyota");
echo "I like " . $cars[0] . ", " . $cars[1] . " and " . $cars[2] . ".";
?>

=> To create an array in PHP, we need to "array()" function

There are three types of arrays in php

1) Indexed Arrays : - Arrays with a numeric index
2) Associative Arrays: -  Arrays with named keys
3) Multidimensional Arrays: - Arrays containing one or more arrays


To get the length of array we can "count()" function

Example: -

<?php
$cars = array("Volvo", "BMW", "Toyota");
echo count($cars);
?>

PHP Array Functions

01) array() => Creates an array
02) array_change_key_case() => Changes all keys in an array to lowercase or uppercase
03) array_chunk() => Splits an array into chunks of arrays
04) array_column() => 	Returns the values from a single column in the input array
05) array_combine() => Creates an array by using the elements from one "keys" array and one "values" array
06) array_count_values() => 	Counts all the values of an array
07) array_diff() => Compare arrays, and returns the differences (compare values only)
08) array_diff_assoc() => Compare arrays, and returns the differences (compare keys and values)
09) array_diff_key() => Compare arrays, and returns the differences (compare keys only)
10) array_diff_uassoc() => Compare arrays, and returns the differences (compare keys and values, using a user-defined key comparison function)
11) array_diff_ukey() => Compare arrays, and returns the differences (compare keys only, using a user-defined key comparison function)
12) array_fill() => Fills an array with values
13) array_fill_keys() => Fills an array with values, specifying keys
14) array_filter() => Filters the values of an array using a callback function
15) array_flip() => Flips/Exchanges all keys with their associated values in an array
16) array_intersect() => Compare arrays, and returns the matches (compare values only)
17) array_intersect_assoc() => Compare arrays and returns the matches (compare keys and values)
18) array_intersect_key() => Compare arrays, and returns the matches (compare keys only)
19) array_intersect_uassoc() => Compare arrays, and returns the matches (compare keys and values, using a user-defined key comparison function)
20) array_intersect_ukey() => Compare arrays, and returns the matches (compare keys only, using a user-defined key comparison function)
21) array_key_exists() => Checks if the specified key exists in the array
22) array_keys() => Returns all the keys of an array
23) array_map() => Sends each value of an array to a user-made function, which returns new values
24) array_merge() => Merges one or more arrays into one array.
25) array_merge_recursive() => Merges one or more arrays into one array recursively
26) array_multisort() => 	Sorts multiple or multi-dimensional arrays.
27) array_pad() => Inserts a specified number of items, with a specified value, to an array.
28) array_pop() => Deletes the last element of an array.
29) array_product() => Calculates the product of the values in an array
30) array_push() => Inserts one or more elements to the end of an array
31) array_rand() => Returns one or more random keys from an array
32) array_reduce() => Returns an array as a string, using a user-defined function
33) array_replace() => 	Replaces the values of the first array with the values from following arrays
34) array_replace_recursive() => Replaces the values of the first array with the values from following arrays recursively
35) array_reverse() => Returns an array in the reverse order
36) array_search() => Searches an array for a given value and returns the key
37) array_shift() => Removes the first element from an array, and returns the value of the removed elem
38) array_slice() => Returns selected parts of an array
39) array_splice() => Removes and replaces specified elements of an array
40) array_sum() => 	Returns the sum of the values in an array
41) array_udiff() => Compare arrays, and returns the differences (compare values only, using a user-defined key comparison function)
42) array_udiff_assoc() => Compare arrays, and returns the differences (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values)
43) array_udiff_uassoc() => Compare arrays, and returns the differences (compare keys and values, using two user-defined key comparison functions)
44) array_uintersect() => Compare arrays, and returns the matches (compare values only, using a user-defined key comparison function)
45) array_uintersect_assoc() => Compare arrays, and returns the matches (compare keys and values, using a built-in function to compare the keys and a user-defined function to compare the values)
46) array_uintersect_uassoc() => Compare arrays, and returns the matches (compare keys and values, using two user-defined key comparison functions)
47) array_unique() => Removes duplicate values from an array
48) array_unshift() => Adds one or more elements to the beginning of an array
49) array_values() => Returns all the values of an array
50) array_walk() => Applies a user function to every member of an array
51) array_walk_recursive() => Applies a user function recursively to every member of an array
52) arsort() => Sorts an associative array in descending order, according to the value
53) asort() => Sorts an associative array in ascending order, according to the value
54) compact() => Create array containing variables and their values
55) count() => Returns the number of elements in an array
56) current() => Returns the current element in an array
57) each() => 	Deprecated from PHP 7.2. Returns the current key and value pair from an array
58) end() => Sets the internal pointer of an array to its last element
59) extract() => Imports variables into the current symbol table from an array
60) in_array() => Checks if a specified value exists in an array
61) key() => Fetches a key from an array
62) krsort() => Sorts an associative array in descending order, according to the key
63) ksort() => Sorts an associative array in ascending order, according to the key
64) list() => Assigns variables as if they were an array
65) natcasesort() => 	Sorts an array using a case insensitive "natural order" algorithm
66) natsort() => Sorts an array using a "natural order" algorithm
67) next() => Advance the internal array pointer of an array
68) pos() => Alias of current()
69) prev() => Rewinds the internal array pointer
70) range() => Creates an array containing a range of elements
71) reset() => Sets the internal pointer of an array to its first element
72) rsort() => Sorts an indexed array in descending order
73) shuffle() => Shuffles an array
74) sizeof() => Alias of count()
75) sort() => 	Sorts an indexed array in ascending order
76) uasort() => Sorts an array by values using a user-defined comparison function and maintains the index association
77) uksort() => Sorts an array by keys using a user-defined comparison function
78) usort() => Sorts an array by values using a user-defined comparison function



PHP Indexed Arrays

There are two ways to create indexed arrays

$cars = array("Volvo", "BMW", "Toyota");

or 

$cars[0] = "Volvo";
$cars[1] = "BMW";
$cars[2] = "Toyota";

Example: -

<?php
$cars = array("Volvo", "BMW", "Toyota");
echo "I like " . $cars[0] . ", " . $cars[1] . " and " . $cars[2] . ".";
?>

Loop Through an Indexed Array

<?php
$cars = array("Volvo", "BMW", "Toyota");
$arrlength = count($cars);

for($x = 0; $x < $arrlength; $x++) {
  echo $cars[$x];
  echo "<br>";
}
?>

PHP Associative Arrays

There are two ways to create an associative array

$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

or 

$age['Peter'] = "35";
$age['Ben'] = "37";
$age['Joe'] = "43";

Example: -

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
echo "Peter is " . $age['Peter'] . " years old.";
?>

Loop through an associative array

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");

foreach($age as $x => $x_value) {
  echo "Key=" . $x . ", Value=" . $x_value;
  echo "<br>";
}
?>

PHP Multidemsional Arrays

A multi-dimensional array is an array containing one more arrays.

Example: -

$cars = array (
  array("Volvo",22,18),
  array("BMW",15,13),
  array("Saab",5,2),
  array("Land Rover",17,15)
);

printing the multidimensional array

<?php
echo $cars[0][0].": In stock: ".$cars[0][1].", sold: ".$cars[0][2].".<br>";
echo $cars[1][0].": In stock: ".$cars[1][1].", sold: ".$cars[1][2].".<br>";
echo $cars[2][0].": In stock: ".$cars[2][1].", sold: ".$cars[2][2].".<br>";
echo $cars[3][0].": In stock: ".$cars[3][1].", sold: ".$cars[3][2].".<br>";
?>

Using loop to print the array

<?php
for ($row = 0; $row < 4; $row++) {
  echo "<p><b>Row number $row</b></p>";
  echo "<ul>";
  for ($col = 0; $col < 3; $col++) {
    echo "<li>".$cars[$row][$col]."</li>";
  }
  echo "</ul>";
}
?>

PHP Sort Functions


=> sort() -> sort arrays in ascending order
=> asort() -> sort arrays in descending order
=> rsort() -> sort associative arrays in ascending order, according to the value
=> ksort() ->  sort associative arrays in ascending order, according to the key
=> arsort() -> sort associative arrays in descending order, according to the value
=> krsort() -> sort associative arrays in descending order, according to the key


Example: - 1

<?php
$cars = array("Volvo", "BMW", "Toyota");
sort($cars);
?>

Example: - 2

<?php
$numbers = array(4, 6, 2, 22, 11);
sort($numbers);
?>

Example: - 3. rsort()

<?php
$cars = array("Volvo", "BMW", "Toyota");
rsort($cars);
?>

Example: - 4 rsort()

<?php
$numbers = array(4, 6, 2, 22, 11);
rsort($numbers);
?>

Example: - 5 asort()

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
asort($age);
?>

Example: - 6 ksort()

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
ksort($age);
?>

Example: - 7 arsort()

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
arsort($age);
?>

Example: - 8 krsort()

<?php
$age = array("Peter"=>"35", "Ben"=>"37", "Joe"=>"43");
krsort($age);
?>






