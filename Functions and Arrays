PHP Built-in Functions

PHP has over 1000 built-in functions that can be called directly, from within a script, to perform a specific task.


PHP User Defined Functions

1. A fucntion is a block of statements, that can be used repeatedly in a program.
2. A function will not execute automatically when a page loads.
3. A function will be executed by a call to the function.

To create user defined function in PHP, we need to follow the synatx. The function starts with the "function" keyword.

Syntax: -

function functionName() {
  code to be executed;
}

Note: - A function name start with a letter or a underscore. Function names are not case-sensitive.

Example:-

<?php
function writeMsg() {
  echo "Hello world!";
}

writeMsg(); // call the function
?>

PHP Function Arguments

Information can be passed to functions through arguments. An argument is just like a variable.

Arguments are specified after function name, inside the parentheses. We can add as many arguments as we want, they are just separated by
comma.

Example: - 1

<?php
function familyName($fname) {
  echo "$fname Refsnes.<br>";
}

familyName("Jani");
familyName("Hege");
familyName("Stale");
familyName("Kai Jim");
familyName("Borge");
?>

Example: - 2

<?php
function familyName($fname, $year) {
  echo "$fname Refsnes. Born in $year <br>";
}

familyName("Hege", "1975");
familyName("Stale", "1978");
familyName("Kai Jim", "1983");
?>

PHP is a Loosely Typed Language

PHP automatically associates a data type to the variable, depending on its value. Since the data types are not set in a strict sense,
you can do things like adding a string to an integer without causing an error.

In PHP 7. type declarations are added. This gives an option to specify the expected data type when declaring a function, and by adding
"strict" declaration, it will throw a "Fatal Error" if data types mismatches.

Example: - 1

<?php
function addNumbers(int $a, int $b) {
  return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is NOT enabled "5 days" is changed to int(5), and it will return 10
?>

Example: - 2

<?php declare(strict_types=1); // strict requirement

function addNumbers(int $a, int $b) {
  return $a + $b;
}
echo addNumbers(5, "5 days");
// since strict is enabled and "5 days" is not an integer, an error will be thrown
?>

PHP Default Argument Value

The following shows how to use default parameter.

Example: -

<?php declare(strict_types=1); // strict requirement
function setHeight(int $minheight = 50) {
  echo "The height is : $minheight <br>";
}

setHeight(350);
setHeight(); // will use the default value of 50
setHeight(135);
setHeight(80);
?>

PHP Functions - Returning Values

To let a function return a value, use the "return" statement

Example: -

<?php declare(strict_types=1); // strict requirement
function sum(int $x, int $y) {
  $z = $x + $y;
  return $z;
}

echo "5 + 10 = " . sum(5, 10) . "<br>";
echo "7 + 13 = " . sum(7, 13) . "<br>";
echo "2 + 4 = " . sum(2, 4);
?>

PHP Return Type Declarations

PHP 7 also supports Type declarations for the "return" statement. With the type declarations for the function arguments, by enabling the
strict requirement. It will throw a "Fatal Error" on a type mismatch.

To declare a type for the function return, add a colon (:) and the type right before the opening curly ({ ) when declaring the function.

Example: - 1

<?php declare(strict_types=1); // strict requirement
function addNumbers(float $a, float $b) : float {
  return $a + $b;
}
echo addNumbers(1.2, 5.2);
?>

You can specify different return type, than argument types, we should check that return is of correct type:

Example: -2

<?php declare(strict_types=1); // strict requirement
function addNumbers(float $a, float $b) : int {
  return (int)($a + $b);
}
echo addNumbers(1.2, 5.2);
?>

Passing Arguments by Reference

Arguments are usually passed by value, which means that a copy of the value is used in the function and the varaiable that was passed
into the function cannot be changed.

When a function argument is passed by reference, changes to the argument also change the variable that was passed in. To turn a function
argument into a reference, the "&" operator is used

Example: -

<?php
function add_five(&$value) {
  $value += 5;
}

$num = 2;
add_five($num);
echo $num;
?>



Arrays




